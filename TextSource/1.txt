https://databasecamp.de/en/ml/minmax-scaler-en

What is the MinMax Scaler?
17. May 2023Machine Learning
What does normalization mean in Deep Learning?
Why normalize data before model training?
What is the difference between standardization and normalization?
How does the MinMax Scaler work?
MinMax Scaler vs. Standard Scaler
What are the advantages and disadvantages of the MinMax Scaler?
How to use the MinMax Scaler in Python?
This is what you should take with you
Other Articles on the Topic of MinMax Scaler
The MinMax Scaler is a variant to normalize the training data of a Machine Learning model, i.e. to bring the numerical values to a uniform scale. This leads to the model learning and converging faster since the gradient changes uniformly and does not make large jumps due to the different scales.

What does normalization mean in Deep Learning?
Normalization of data means that all features of the model are brought to a uniform scale. For this purpose, the range between 0 and 1 or between -1 and 1 is usually chosen. In reality, numerical features usually have different scales as well. For example, if we take the age of a person and his or her salary, then a period of 100 years is very high, while a monthly salary of €100 is relatively low.

Normalization is also only used when the underlying data does not follow a Gaussian normal distribution. Thus, if one assumes that salary and age are normally distributed, one should not perform normalization.

Why normalize data before model training?
Normalization of data has many positive properties on the training of Machine Learning models. However, care should be taken to use it when the model used does not assume a normal distribution of the data, as is the case with a neural network, for example. If, on the other hand, models such as LDA, Gaussian Naive Bayes, or Logistic Regression are used, normalization should be dispensed with and standardization used instead.

The following advantages result from the normalization of data:

Using a uniform scale shows no bias in the model towards large numerical values. Otherwise, features that naturally have higher numbers could contribute more to model prediction than others.
Training is more uniform because there are no large jumps in numbers that could lead to irregularities. This allows higher learning rates to be used and speeds up training.
Normalization can also reduce the risk of Internal Covariate Shift. Internal Covariate Shift refers to the phenomenon when the hidden layers of a neural network respond to a change in the distribution of input values. As a result, the weights in the layers change very strongly and the model does not converge.
What is the difference between standardization and normalization?
Normalization of data describes the process of bringing numerical values to a uniform scale, for example, to the range between 0 and 1 or between -1 and 1. Normalization should be used primarily when the underlying data does not follow a normal distribution.

Das Diagramm zeigt mehrere Glockenkurven der Gauß-Verteilung.
Different Forms of Normal Distribution | Source: Wikipedia
Standardization, while in many cases also causing the values to lie on a uniform scale, actually has the goal of changing the distribution of the values so that they have a mean of 0 and a standard deviation of 1. Standardization is thus used so that all numerical input values follow an equal distribution.

The normalization is strongly influenced by outliers, i.e. data points that take on significantly larger or smaller values than the surrounding data points. Due to the scaling into uniform values, the remaining values are very close to each other and take on very similar values. This makes it almost impossible to distinguish between these values. Therefore, outliers should be removed from the data set before normalization.

Standardization, on the other hand, is little or not at all affected by outliers. Because there is no scaling within fixed limits, the outliers can be located at the outer ends of the normal distribution. Thus, the information on the outliers is also preserved in the model.

Depending on the selected model to be trained, it also results in whether the data can be standardized or normalized. Some models require a normal distribution of data, which is why only standardization should be used for them. These include for example, LDA, Gaussian Naive Bayes, or Logistic Regression. For neural networks, on the other hand, normalization can be used since no distribution of data is assumed.

How does the MinMax Scaler work?
The MinMax Scaler is a form of normalization that scales the values between 0 and 1. It gets its name because the maximum and minimum values of the feature are used for normalization. The concrete formal of the MinMax Scaler is:

xscaled=x–xminxmax–xmin
MinMax Scaler vs. Standard Scaler
In practice, the question often arises whether to use the MinMax Scaler or the Standard Scaler. Although both are called scalers, the MinMax Scaler is a normalization and the Standard Scaler is a standardization. Thus, both have different areas of application, since the MinMax Scaler brings the values to a uniform scale, while the Standard Scaler brings about a normal distribution of the data.

Thus, the use of either method depends on the model being trained and whether normalization or standardization of the data is to be performed.

What are the advantages and disadvantages of the MinMax Scaler?
The MinMax Scaler is a popular data scaling technique used in various Machine Learning tasks. It offers several advantages, including:

Simplicity: Implementing MinMax Scaler is straightforward and requires minimal coding effort.
Preserves Relationships: MinMax Scaler maintains the relative relationships between data points. It ensures that the ordering of values is preserved, which can be crucial in certain algorithms.
Compatibility with Distance-based Algorithms: MinMax Scaler is particularly useful for distance-based algorithms like k-nearest neighbors (KNN) and clustering. It helps these algorithms accurately measure the similarity between data points.
Retains Interpretability: The scaled data retains the original units and ranges, making it easier to interpret and understand the results. This can be important in domains where interpretability is critical.
While the MinMax Scaler has its advantages, it also has some limitations to consider:

Sensitivity to Outliers: MinMax Scaler is highly sensitive to outliers. Outliers can significantly affect the scaling process and distort the scaled values for the entire dataset.
Limited Range: The scaling range of MinMax Scaler is fixed, typically between 0 and 1. This may not be suitable if the data distribution requires a different range for effective analysis.
Impact on Data Distribution: MinMax Scaler can alter the original distribution of the data, especially if there are extreme values or a highly skewed distribution. This distortion may impact the performance of certain algorithms.
Dependency on Data Range: The effectiveness of the MinMax Scaler depends on the range of the input data. If the data has a narrow range, the scaled values may not adequately capture the variations present in the dataset.
It’s important to consider these advantages and disadvantages while deciding whether to use MinMax Scaler or explore alternative scaling methods. The choice should be based on the specific characteristics of your data and the requirements of your analysis.

How to use the MinMax Scaler in Python?
Using the MinMaxScaler in Python is straightforward, thanks to the Scikit-Learn library. Follow these steps to apply the MinMaxScaler to your data:

Import the necessary libraries:
MinMax Scaler Code
Create an instance of the MinMax Scaler:
MinMax Scaler Code
Fit the scaler to your data:
MinMax Scaler Code
Here, data represents your input dataset, which should be a 2D array-like structure.

Transform the data using the scaler:
MinMax Scaler Code
The transform the method scales the data based on the fitted scaler.

Alternatively, you can combine the fitting and transformation steps into a single call using the fit_transform method:

MinMax Scaler Code
The resulting scaled_data will be a NumPy array with scaled values.

It’s important to note that the MinMaxScaler scales each feature (column) independently based on its minimum and maximum values. If your dataset has both training and testing data, make sure to fit the scaler only on the training data and then use the same scaler to transform both the training and testing data. This ensures consistency in the scaling process.

Additionally, if you need to inverse-transform the scaled data back to the original values, you can use the inverse_transform method:

MinMax Scaler Code
This can be useful when you want to interpret or analyze the results in the original data space.

By following these steps, you can easily apply the MinMax Scaler to normalize your data and bring it within a specific range, making it suitable for various Machine Learning algorithms.

This is what you should take with you
The MinMax Scaler is a popular feature scaling technique in Machine Learning.
It scales the features of a dataset to a specific range, typically between 0 and 1.
The main advantage of the MinMax Scaler is that it preserves the shape of the original distribution while bringing the values within a desired range.
It is especially useful when the data has varying scales or outliers.
The MinMax Scaler is easy to use, thanks to the scikit-learn library in Python.
However, it has some limitations, such as sensitivity to outliers and the potential for information loss.
It is important to apply the MinMax Scaler properly, fitting it only on the training data and using the same scaler to transform the testing data.